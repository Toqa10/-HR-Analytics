{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "592731f2-585b-4281-bb3d-6339c72f5e4b",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (4141122666.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[5], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    streamlit run hr_app.py\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "streamlit run hr_app.py\n",
    "pip install kaleido\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dce9e768-2da3-43ae-b866-7f5ebe49aa98",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-21 01:24:03.212 Session state does not function when running a script without `streamlit run`\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'columns'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 187\u001b[0m\n\u001b[0;32m    185\u001b[0m \u001b[38;5;66;03m# Standardize column names (lowercase)\u001b[39;00m\n\u001b[0;32m    186\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m df \u001b[38;5;129;01min\u001b[39;00m [dfE, dfS, dfDID, dfDN, dfSnap] \u001b[38;5;28;01mif\u001b[39;00m dfSnap \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m [dfE, dfS, dfDID, dfDN]:\n\u001b[1;32m--> 187\u001b[0m     df\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;241m=\u001b[39m [c\u001b[38;5;241m.\u001b[39mstrip()\u001b[38;5;241m.\u001b[39mlower() \u001b[38;5;28;01mfor\u001b[39;00m c \u001b[38;5;129;01min\u001b[39;00m df\u001b[38;5;241m.\u001b[39mcolumns]\n\u001b[0;32m    189\u001b[0m \u001b[38;5;66;03m# Expectation mapping\u001b[39;00m\n\u001b[0;32m    190\u001b[0m \u001b[38;5;66;03m# employees: id, first_name, last_name, birth_date, hire_date, gender\u001b[39;00m\n\u001b[0;32m    191\u001b[0m \u001b[38;5;66;03m# salary: employee_id, amount, from_date, to_date\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    195\u001b[0m \n\u001b[0;32m    196\u001b[0m \u001b[38;5;66;03m# Derive age if birth_date present\u001b[39;00m\n\u001b[0;32m    197\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbirth_date\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m dfE\u001b[38;5;241m.\u001b[39mcolumns:\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'columns'"
     ]
    }
   ],
   "source": [
    "# hr_app.py\n",
    "import io\n",
    "import base64\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# -------------------------------\n",
    "# Page Config\n",
    "# -------------------------------\n",
    "st.set_page_config(\n",
    "    page_title=\"HR Analytics Dashboard\",\n",
    "    page_icon=\"📊\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# -------------------------------\n",
    "# Theming & Background Controls\n",
    "# -------------------------------\n",
    "st.markdown(\"\"\"\n",
    "    <style>\n",
    "        .main-header { font-weight: 800; font-size: 28px; margin-bottom: 0.25rem; }\n",
    "        .sub { color: #5c6b73; margin-bottom: 1rem; }\n",
    "        .stMetric { background: rgba(255,255,255,0.5); border-radius: 16px; }\n",
    "        .hr-card {\n",
    "            background: rgba(255,255,255,0.75);\n",
    "            border: 1px solid rgba(0,0,0,0.06);\n",
    "            border-radius: 18px;\n",
    "            padding: 14px 16px;\n",
    "            box-shadow: 0 8px 24px rgba(0,0,0,0.05);\n",
    "        }\n",
    "        .hr-note { color:#415a77; font-size: 14px; margin-top: 4px; }\n",
    "        .hr-cap { color:#33415c; font-size: 13px; margin-top: 6px; }\n",
    "        .block-title { font-weight:700; font-size: 18px; margin-bottom: 10px; }\n",
    "        .elegant-divider { height:1px; width:100%; background:linear-gradient(90deg,transparent,#cbd5e1,transparent); margin:8px 0 14px;}\n",
    "    </style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "with st.sidebar:\n",
    "    st.title(\"⚙️ Appearance\")\n",
    "    bg_choice = st.selectbox(\n",
    "        \"Background Style\",\n",
    "        [\"Soft Gradient\", \"Light Gradient\", \"Custom Image URL\"]\n",
    "    )\n",
    "    custom_url = \"\"\n",
    "    if bg_choice == \"Custom Image URL\":\n",
    "        custom_url = st.text_input(\"Paste Background Image URL\", value=\"\")\n",
    "\n",
    "# Inject Background CSS\n",
    "def set_background(bg_choice: str, url: str = \"\"):\n",
    "    if bg_choice == \"Soft Gradient\":\n",
    "        css = \"\"\"\n",
    "        <style>\n",
    "            .stApp {\n",
    "              background: linear-gradient(135deg,#f6f9ff 0%, #f0f7ff 40%, #fafcff 100%);\n",
    "            }\n",
    "            .stSidebar { background: linear-gradient(180deg,#ecf3ff 0%, #f8fbff 100%) !important; }\n",
    "        </style>\n",
    "        \"\"\"\n",
    "    elif bg_choice == \"Light Gradient\":\n",
    "        css = \"\"\"\n",
    "        <style>\n",
    "            .stApp {\n",
    "              background: linear-gradient(135deg,#ffffff 0%, #f9fbfd 50%, #eef2ff 100%);\n",
    "            }\n",
    "            .stSidebar { background: linear-gradient(180deg,#f7f9fc 0%, #ffffff 100%) !important; }\n",
    "        </style>\n",
    "        \"\"\"\n",
    "    else:  # Custom Image URL\n",
    "        if url.strip():\n",
    "            css = f\"\"\"\n",
    "            <style>\n",
    "                .stApp {{\n",
    "                  background: url('{url}') no-repeat center center fixed;\n",
    "                  background-size: cover;\n",
    "                }}\n",
    "                .stSidebar {{ background: rgba(255,255,255,0.8) !important; }}\n",
    "                .block-container {{ background: rgba(255,255,255,0.75); border-radius: 18px; padding: 24px; }}\n",
    "            </style>\n",
    "            \"\"\"\n",
    "        else:\n",
    "            css = \"\"\"\n",
    "            <style>\n",
    "                .stApp { background: linear-gradient(135deg,#ffffff 0%, #f9fbfd 50%, #eef2ff 100%); }\n",
    "            </style>\n",
    "            \"\"\"\n",
    "    st.markdown(css, unsafe_allow_html=True)\n",
    "\n",
    "set_background(bg_choice, custom_url)\n",
    "\n",
    "# -------------------------------\n",
    "# Header\n",
    "# -------------------------------\n",
    "st.markdown('<div class=\"main-header\">HR Analytics Dashboard</div>', unsafe_allow_html=True)\n",
    "st.markdown('<div class=\"sub\">اسأل سؤالًا وحدد الرسم البياني المناسب تلقائيًا، مع تفسير وملف تحميل للصورة (اختياري).</div>', unsafe_allow_html=True)\n",
    "st.markdown('<div class=\"elegant-divider\"></div>', unsafe_allow_html=True)\n",
    "\n",
    "# -------------------------------\n",
    "# Sidebar: Data Upload\n",
    "# -------------------------------\n",
    "with st.sidebar:\n",
    "    st.title(\"📁 Data\")\n",
    "    st.caption(\"ارفع الملفات المطلوبة (CSV).\")\n",
    "    emp_file = st.file_uploader(\"employee.csv\", type=[\"csv\"])\n",
    "    sal_file = st.file_uploader(\"salary.csv\", type=[\"csv\"])\n",
    "    dep_emp_file = st.file_uploader(\"department_employee.csv\", type=[\"csv\"])\n",
    "    dep_file = st.file_uploader(\"department.csv\", type=[\"csv\"])\n",
    "    snap_file = st.file_uploader(\"current_employee_snapshot.csv (اختياري)\", type=[\"csv\"])\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "    st.title(\"❓ Questions\")\n",
    "    question = st.selectbox(\n",
    "        \"اختر سؤال التحليل:\",\n",
    "        [\n",
    "            \"توزيع الجنس حسب القسم\",\n",
    "            \"متوسط الراتب لكل قسم\",\n",
    "            \"أعلى موظف راتبًا في كل قسم\",\n",
    "            \"تطور متوسط الراتب عبر السنوات لكل قسم\",\n",
    "            \"نسبة نمو الرواتب سنويًا لكل قسم\",\n",
    "            \"عدد الموظفين لكل قسم\",\n",
    "            \"إجمالي الرواتب لكل قسم\",\n",
    "            \"فجوة الرواتب (أقصى-أدنى) لكل قسم\",\n",
    "            \"توزيع مدة الخدمة (Tenure)\",\n",
    "            \"متوسط مدة الخدمة للشركة عبر الزمن\"\n",
    "        ]\n",
    "    )\n",
    "    st.markdown(\"---\")\n",
    "    st.caption(\"💡 لتفعيل زر تحميل الصورة، ثبّت الحزمة: `pip install kaleido`.\")\n",
    "\n",
    "# -------------------------------\n",
    "# Utilities\n",
    "# -------------------------------\n",
    "def safe_read_csv(file, **kwargs):\n",
    "    try:\n",
    "        return pd.read_csv(file, **kwargs)\n",
    "    except Exception as e:\n",
    "        st.error(f\"خطأ في قراءة الملف: {e}\")\n",
    "        return None\n",
    "\n",
    "def try_to_png(fig, default_name=\"chart.png\"):\n",
    "    \"\"\"\n",
    "    Convert Plotly fig to PNG for download. Requires kaleido.\n",
    "    \"\"\"\n",
    "    btn_placeholder = st.empty()\n",
    "    try:\n",
    "        import plotly.io as pio\n",
    "        buf = io.BytesIO()\n",
    "        png_bytes = fig.to_image(format=\"png\", scale=2)  # needs kaleido\n",
    "        buf.write(png_bytes)\n",
    "        btn_placeholder.download_button(\n",
    "            \"⬇️ تحميل الشارت كصورة (PNG)\",\n",
    "            data=buf.getvalue(),\n",
    "            file_name=default_name,\n",
    "            mime=\"image/png\"\n",
    "        )\n",
    "    except Exception as e:\n",
    "        st.info(\"لتحميل الصورة كـ PNG نحتاج الحزمة: `kaleido`. ثبّتيها ثم أعيدي التشغيل.\")\n",
    "\n",
    "def fmt_currency(x):\n",
    "    try:\n",
    "        return f\"{x:,.0f}\"\n",
    "    except:\n",
    "        return x\n",
    "\n",
    "# -------------------------------\n",
    "# Load & Prepare Data\n",
    "# -------------------------------\n",
    "if not (emp_file and sal_file and dep_emp_file and dep_file):\n",
    "    st.warning(\"👇 ارفعي الملفات الأربعة الأساسية من الشريط الجانبي لبدء التحليل.\")\n",
    "    st.stop()\n",
    "\n",
    "dfE = safe_read_csv(emp_file)\n",
    "dfS = safe_read_csv(sal_file)\n",
    "dfDID = safe_read_csv(dep_emp_file)\n",
    "dfDN = safe_read_csv(dep_file)\n",
    "dfSnap = safe_read_csv(snap_file) if snap_file else None\n",
    "\n",
    "if any(x is None for x in [dfE, dfS, dfDID, dfDN]):\n",
    "    st.stop()\n",
    "\n",
    "# Standardize column names (lowercase)\n",
    "for df in [dfE, dfS, dfDID, dfDN, dfSnap] if dfSnap is not None else [dfE, dfS, dfDID, dfDN]:\n",
    "    df.columns = [c.strip().lower() for c in df.columns]\n",
    "\n",
    "# Expectation mapping\n",
    "# employees: id, first_name, last_name, birth_date, hire_date, gender\n",
    "# salary: employee_id, amount, from_date, to_date\n",
    "# department_employee: employee_id, department_id\n",
    "# department: id, dept_name\n",
    "# snapshot (optional): employee_id, dept_name, gender, department_tenure, company_tenure, salary_amount, title, year\n",
    "\n",
    "# Derive age if birth_date present\n",
    "if \"birth_date\" in dfE.columns:\n",
    "    try:\n",
    "        dfE[\"birth_date\"] = pd.to_datetime(dfE[\"birth_date\"], errors=\"coerce\")\n",
    "        fixed_date = pd.to_datetime(\"2002-01-01\")\n",
    "        dfE[\"age\"] = ((fixed_date - dfE[\"birth_date\"]).dt.days / 365.25).round().astype(\"Int64\")\n",
    "    except Exception:\n",
    "        pass\n",
    "\n",
    "# Merge departments\n",
    "depMerged = dfDID.merge(dfDN, left_on=\"department_id\", right_on=\"id\", how=\"left\", suffixes=(\"\", \"_dept\"))\n",
    "# Merge all\n",
    "merged = dfE.merge(dfS, left_on=\"id\", right_on=\"employee_id\", how=\"left\", suffixes=(\"_emp\", \"_sal\"))\n",
    "merged = merged.merge(depMerged, left_on=\"id\", right_on=\"employee_id\", how=\"left\", suffixes=(\"\", \"_depemp\"))\n",
    "\n",
    "# Dates → years\n",
    "if \"hire_date\" in merged.columns:\n",
    "    merged[\"hire_date\"] = pd.to_datetime(merged[\"hire_date\"], errors=\"coerce\")\n",
    "    merged[\"year\"] = merged[\"hire_date\"].dt.year\n",
    "if \"from_date\" in merged.columns:\n",
    "    merged[\"from_date\"] = pd.to_datetime(merged[\"from_date\"], errors=\"coerce\")\n",
    "    merged[\"year_from\"] = merged[\"from_date\"].dt.year\n",
    "\n",
    "# Clean department name\n",
    "dept_col = \"dept_name\" if \"dept_name\" in merged.columns else None\n",
    "if dept_col is None:\n",
    "    st.error(\"لم يتم العثور على عمود اسم القسم `dept_name`. تأكدي من ملف department.csv.\")\n",
    "    st.stop()\n",
    "\n",
    "# -------------------------------\n",
    "# KPIs (quick glance)\n",
    "# -------------------------------\n",
    "col1, col2, col3, col4 = st.columns(4)\n",
    "with col1:\n",
    "    employees_count = merged[\"id\"].nunique() if \"id\" in merged.columns else merged[\"employee_id\"].nunique()\n",
    "    st.metric(\"عدد الموظفين\", f\"{employees_count:,}\")\n",
    "with col2:\n",
    "    if \"amount\" in merged.columns:\n",
    "        total_pay = np.nansum(merged[\"amount\"])\n",
    "        st.metric(\"إجمالي الرواتب المسجّلة\", fmt_currency(total_pay))\n",
    "with col3:\n",
    "    st.metric(\"عدد الأقسام\", merged[dept_col].nunique())\n",
    "with col4:\n",
    "    years_avail = merged[\"year_from\"].dropna().nunique() if \"year_from\" in merged.columns else 0\n",
    "    st.metric(\"عدد السنوات في الرواتب\", years_avail)\n",
    "\n",
    "st.markdown('<div class=\"elegant-divider\"></div>', unsafe_allow_html=True)\n",
    "\n",
    "# -------------------------------\n",
    "# Render Charts by Question\n",
    "# -------------------------------\n",
    "def show_and_download(fig, title_slug=\"chart\"):\n",
    "    st.plotly_chart(fig, use_container_width=True)\n",
    "    try_to_png(fig, f\"{title_slug}.png\")\n",
    "\n",
    "# 1) Gender distribution by department\n",
    "if question == \"توزيع الجنس حسب القسم\":\n",
    "    if \"gender\" not in merged.columns:\n",
    "        st.warning(\"لا يوجد عمود 'gender' في بيانات الموظفين.\")\n",
    "    else:\n",
    "        g = merged.groupby([dept_col, \"gender\"]).size().reset_index(name=\"count\")\n",
    "        fig = px.bar(g, x=dept_col, y=\"count\", color=\"gender\",\n",
    "                     barmode=\"group\", title=\"توزيع الجنس حسب القسم\")\n",
    "        fig.update_layout(xaxis={'categoryorder': 'total descending'})\n",
    "        show_and_download(fig, \"gender_distribution_by_department\")\n",
    "        st.caption(\"يبين الرسم توزيع الجنسين داخل كل قسم لتحديد التوازن أو الاختلال بين الذكور والإناث.\")\n",
    "\n",
    "# 2) Average salary per department\n",
    "elif question == \"متوسط الراتب لكل قسم\":\n",
    "    if \"amount\" not in merged.columns:\n",
    "        st.warning(\"لا يوجد عمود 'amount' في ملف الرواتب.\")\n",
    "    else:\n",
    "        avg_sal = merged.groupby(dept_col)[\"amount\"].mean().reset_index()\n",
    "        fig = px.bar(avg_sal, x=dept_col, y=\"amount\", title=\"متوسط الراتب لكل قسم\",\n",
    "                     labels={\"amount\": \"Average Salary\"})\n",
    "        fig.update_layout(xaxis={'categoryorder': 'total descending'})\n",
    "        show_and_download(fig, \"avg_salary_per_department\")\n",
    "        st.caption(\"متوسط الراتب يعكس مستويات التعويضات بين الأقسام للمقارنة العادلة.\")\n",
    "\n",
    "# 3) Highest paid employee per department\n",
    "elif question == \"أعلى موظف راتبًا في كل قسم\":\n",
    "    required = {\"first_name\", \"last_name\", \"amount\"}\n",
    "    if not required.issubset(set(merged.columns)):\n",
    "        st.warning(\"نحتاج الأعمدة: first_name, last_name, amount.\")\n",
    "    else:\n",
    "        highest = merged.sort\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33a5f490-2ec7-4d88-a4d6-5a003d5094d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3] *",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
